package delivery;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;
import stock.Item;
import stock.Stock;
import stock.StockException;

/**
 * Represents a set of Truck objects.
 * It uses a HashSet as a data structure to contain truck and a cargo inside these trucks.
 * The HashSet is of type Set&lt;Truck&gt;.
 * 
 * @author lara09
 *
 */
public class Manifest {
	
	Set<Truck> fleet;
	
	/**
	 * Constructs an empty Manifest with empty fleet.
	 */
	public Manifest() {
		fleet = new HashSet<Truck>();
	}

	/**
	 * Constructs a manifest given a Stock while optimising the manifest's cost.
	 * The items added to the manifest are the items whose amounts
	 * are lower or equal to an item's reorder point.
	 * The manifest is generated by sorting the items by temperature.
	 * The items are then added to trucks progressively, making new trucks
	 * if the current truck runs out of space. The truck type is determined
	 * automatically by TruckFactory.
	 * 
	 * @param stock the Stock to generate a manifest for
	 * @return the generated manifest
	 * @throws DeliveryException via Truck and TruckFactory
	 * @throws StockException via Stock
	 */
	public Manifest(Stock stock) throws StockException, DeliveryException {
		// create list of entries
		ArrayList<Entry<Item, Integer>> reorderStock = new ArrayList<Entry<Item, Integer>>(stock.getItems().entrySet());
		
		// sort list by item temperature
		reorderStock.sort(new Comparator<Entry<Item, Integer>>() {
			@Override
			public int compare(Entry<Item, Integer> entry1, Entry<Item, Integer> entry2) {
				Integer temp1 = entry1.getKey().getTemperature();
				Integer temp2 = entry2.getKey().getTemperature();
				if (temp1 == null) return 1;
				if (temp2 == null) return -1;
				return temp1.compareTo(temp2);
			}
		});
		
		// makes manifest by successively filling up trucks with the lowest temperature items possible
		fleet = new HashSet<Truck>();
		Stock currentStock = new Stock();
		Boolean isRefrigerated = null;
		int refrigeratedCapacity = new RefrigeratedTruck(new Stock()).getCapacity();
		int ordinaryCapacity = new OrdinaryTruck(new Stock()).getCapacity();
		
		for (Entry<Item, Integer> entry: reorderStock) {
			Item item = entry.getKey();
			int amount = entry.getValue();
			
			if (isRefrigerated == null) isRefrigerated = item.getTemperature() != null;
			int truckSpace = isRefrigerated ? refrigeratedCapacity : ordinaryCapacity;
			int availSpace = truckSpace - currentStock.getNumItems();
			if (amount > availSpace) {
				currentStock.addItems(item, availSpace);
				fleet.add(TruckFactory.getTruck(currentStock));
				
				currentStock = new Stock();
				currentStock.addItems(item, amount - availSpace);
				isRefrigerated = item.getTemperature() != null;
			} else {
				currentStock.addItems(item, amount);
			}
		}
		fleet.add(TruckFactory.getTruck(currentStock));
	}
	
	/**
	 * Adds the specified truck to the fleet.
	 * 
	 * @param truck
	 */
	public void addTruck(Truck truck) {
		fleet.add(truck);
	}

	/**
	 * Returns an unmodifiable version of the Set representing the trucks.
	 * It is unmodifiable so that the contents will not be overwritten
	 * by direct access to the set (put, remove, replace).
	 * 
	 * @return an unmodifiable Set&lt;Truck&gt;
	 */
	public Set<Truck> getFleet() {
		return Collections.unmodifiableSet(fleet);
	}

	/**
	 * Calculates a total cost of each truck with cargo, writes item and amount into a Set for each truck 
	 * Returns the total number of items in the stock
	 * 
	 * @return total cost for the truck and the cargo
	 */
	public double getTotalCost() {
		double totalCost = 0.0;
		for (Truck truck: fleet) {
			totalCost += truck.getCost();
			for (Entry<Item, Integer> entry: truck.getCargo().getItems().entrySet()) {
				Item item = entry.getKey();
				Integer amount = entry.getValue();
				totalCost += amount * item.getCost();
			}
		}
		return totalCost;
	}

	public Stock getTotalCargo() throws StockException {
		Stock totalCargo = new Stock();
		for (Truck truck: fleet) {
			for (Entry<Item, Integer> entry: truck.getCargo().getItems().entrySet()) {
				Item item = entry.getKey();
				int amount = entry.getValue();
				totalCargo.addItems(item, amount);
			}
		}
		return totalCargo;
	}
	
	/**
	 * 
	 * @return assigns cargo item from a Truck class to a Manifest class
	 */
	@Override
	public boolean equals(Object o) {
		if (o.getClass().equals(this.getClass())) {
			return fleet.equals(this.getClass().cast(o).getFleet());
		}
		return false;
	}
	
	/**
	 * 
	 * @return hashCode of the fleet items
	 */
	@Override
	public int hashCode() {
		return fleet.hashCode();
	}

}
