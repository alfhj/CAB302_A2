Larysa:
Item
Exceptions
Manifest

Alf:
Stock
Truck
CSVHandler

Both:
Store

---

Class: Item
The class to store an item. It has 6 fields and 2 constructors, with and without temperature.

Edge cases:
Name is empty
Cost is negative
Price is negative or zero
Reorder point is negative
Reorder amount is negative or zero
Temperature is very high/low

Fields:
-	String name
-	int cost
-	int price
-	int reorderPoint
-	int reorderAmount
-	int temperature
+ String getName()
+ int getCost()
+ int getPrice()
+ int getReorderPoint()
+ int getReorderAmount()
+ int getTemperature()

---

Class: Stock
A collection of Items. A HashMap is chosen to keep track of the included items and their amounts. The method "getStock" creates a copy (or unmodifiableMap) of the original HashMap, so that the values are protected.

Edge cases:
The amount to be added is negative or zero
The item to be removed is not in stock
The amount to be removed is more than is available in stock
All of one item is removed -> Item should be removed from stock (instead of setting amount to 0)

Fields:
-	Map<Item, Integer> stock
+ void addItems(Item item, int amount)
+ void removeItems(Item item, int amount) throws StockException
+ Map<Item, Integer> getStock() = new Stock() -> addItems...

---

Abstract class: Truck
An abstract class for trucks. The constructor (no access modifier) takes two arguments: capacity and cargo.

Edge cases:
Cargo contains more items than the truck's capacity
If refrigerated, cargo contains items with lower temperature than truck's temperature

Fields:
-	int capacity
-	Stock cargo
A+ double getCost()
+ int getCapacity()
+ Stock getCargo()

---

Class: OrdinaryTruck extends Truck
An unrefrigerated truck. The constructor takes a cargo and sets capacity to 1000. Costs between $750 and $1000

Fields:
+ double getCost()

---

Class: RefrigeratedTruck extends Truck
A refrigerated truck. The constructor takes a cargo and a temperature and sets capacity to 800. The truck's temperature should be equal to the lowest temperature of the items. Costs between about $1000 and $1500

Fields:
-	int temperature
+ int getTemperature()
+ double getCost()

---

Class: Manifest
A collection of trucks. Set is being used to avoid two identical trucks on the same manifest. "getTotalCost" calculates the total cost of the manifest by summing the cost of each truck together with the prices of all the items.

Edge cases:
Fleet is empty when calculating total cost

Fields:
-	Set<Truck> fleet
+ void addTruck(Truck truck)
+ double getTotalCost()

---

Class (singleton): Store
Singleton pattern, as there is only one store.
Approach to generating manifests: If needed items contains a refrigerated item, create a truck with temperature equal to the lowest temperature of the needed items. Fill the truck with the lowest temperature items. If it gets full, create a new truck depending on the temperature of the remainding items. Repeat.

Edge cases:

Fields:
-	double capital
-	Stock inventory
-	String name
+ double getCapital()
+ Stock getInventory()
+ String getName()
+ void setName(String name)
+ void loadInventory(Stock items)
+ void importSalesLog(Stock sales)
+ void importManifest(Manifest manifest)
+ Manifest exportManifest()

---

Class (singleton): CSVHandler
+ String readCSV(File file)
+ void writeCSV(File file, String output)
+ Stock readItemProperties(File file)
+ Stock readSalesLog(File file)
+ Manifest readManifest(File file)
+ void writeManifest(File file, Manifest output)

public Item(String name, int cost
   this.name = name;
   this.cost = cost;

-----

GUI:
______________________________________________________________
|          [store name] - Inventory management      [_][O][X]|
|____________________________________________________________|
| __________________________________________________________ |
| |____Name___|_Cost_|Price|Re.point|Re.amount|_Temp._|____| |
| |___rice____|___2__|__3__|___225__|___300___|_______|__|X| |
| |___beans___|___4__|__6__|___450__|___525___|_______|__|X| |
| |___pasta___|___3__|__4__|___125__|___250___|_______|__|X| |
| |_biscuits__|___2__|__5__|___350__|___575___|_______|__|X| |
| |___nuts____|___5__|__9__|___125__|___250___|_______|__|X| |
| |___chips___|___2__|__4__|___125__|___220___|_______|__| | |
| |_chocolate_|___5__|__5__|___250__|___375___|_______|__| | |
| |___bread___|___2__|__3__|___125__|___200___|_______|__| | |
| |_mushrooms_|___2__|__2__|___200__|___325___|___10__|__| | |
| |__tomatoes_|___1__|__2__|___325__|___400___|___10__|__|_| |
| ________________________ ____________________              |
| | Load item properties | | Import sales log |              |
| |______________________| |__________________|              |
| ___________________ ___________________                    |
| | Export manifest | | Import manifest |                    |
| |_________________| |_________________|                    |
|____________________________________________________________|

-----

Example:

Item item1 = new Item("Rice", 2, 3, 225, 300);
Stock stock1 = new Stock();
stock1.addItems(item1, 100);
Truck truck1 = new OrdinaryTruck(stock1);
Manifest manifest1 = new Manifest();
manifest1.addTruck(truck1);
Store store = Store.getInstance();
store.setName("My store");
store.importManifest(manifest1);

Test driven development
not red, green, refactor

Read csv:
Data structure:

git log command updated

CSVFormatException
DeliveryException
StockException