Larysa:
Item
Manifest
Truck
Exceptions

Alf:
Stock
Store
CSVHandler

---

Class: Item
The class to store an item. It has 6 fields and 2 constructors, with and without temperature. Items can have a temperature from -20 to 10 C.

Edge cases:
Name is empty
Cost is negative
Price is negative or zero
Reorder point is negative
Reorder amount is negative or zero
Temperature is very high/low

Fields:
-	String name
-	int cost
-	int price
-	int reorderPoint
-	int reorderAmount
-	Integer temperature (can be null)
+ String getName()
+ int getCost()
+ int getPrice()
+ int getReorderPoint()
+ int getReorderAmount()
+ int getTemperature()

---

Class: Stock
A collection of Items. A HashMap is chosen to keep track of the included items and their amounts. The method "getStock" creates a copy (or unmodifiableMap) of the original HashMap, so that the values are protected.

Edge cases:
The amount to be added is negative
The amount to be removed is negative
The item to be removed is not in stock
The amount to be removed is more than is available in stock
All of one item is removed -> set amount to 0 (don't delete item)

Fields:
-	Map<Item, Integer> items
+ void addItems(Item item, int amount)
+ void removeItems(Item item, int amount) throws StockException
+ Map<Item, Integer> getItems()  unmodifiableMap

---

Abstract class: Truck
An abstract class for trucks. The constructor (no access modifier) takes two arguments: capacity and cargo.

Edge cases:
Cargo contains more items than the truck's capacity

Fields:
-	int capacity
-	Stock cargo
+A double getCost()
+ int getCapacity()
+ Stock getCargo()

---

Class: OrdinaryTruck extends Truck
An unrefrigerated truck. The constructor takes a cargo and sets capacity to 1000. Costs between $750 and $1000

Fields:
+ double getCost()

---

Class: RefrigeratedTruck extends Truck
A refrigerated truck. The constructor takes a cargo and sets capacity to 800. The truck's temperature is set to be equal to the lowest temperature of the items. Because items must have temperatures from -20 to 10 C, no further checking of the truck's temperature is necessary. Costs between around $1000 and $1700

Fields:
-	int temperature
+ int getTemperature()
+ double getCost()

---

Class: Manifest
A collection of trucks. Set is being used to avoid two identical trucks on the same manifest. "getTotalCost" calculates the total cost of the manifest by summing the cost of each truck together with the prices of all the items.

Edge cases:
Fleet is empty when calculating total cost

Fields:
-	Set<Truck> fleet
+ void addTruck(Truck truck)
+ Set<Truck> getFleet() unmodifiableSet
+ double getTotalCost()

---

Class (singleton): Store
Singleton pattern, as there is only one store.
Approach to generating manifests: If needed items contains a refrigerated item, create a truck with temperature equal to the lowest temperature of the needed items. Fill the truck with the lowest temperature items. If it gets full, create a new truck depending on the temperature of the remainding items. Repeat.
Methods:
getCapital(): return capital
getInventory(): return inventory
getName(): return name
loadInventory(Stock items): initializes the store's inventory based on the Stock items. Originally read from item properties csv.
exportManifest(): checks which items needs to be reordered (quantity < reorder point). Then makes a new manifest based on these items.

Edge cases:

Fields:
-	double capital
-	Stock inventory
-	String name
+ double getCapital()
+ Stock getInventory()
+ String getName()
+ void setName(String name)
+ void loadInventory(Stock items)
+ void importSalesLog(Stock sales)
+ void importManifest(Manifest manifest)
+ Manifest exportManifest()

---

Class (static): CSVHandler
+S String readCSV(File file)
+S void writeCSV(File file, String output)
+S Stock readItemProperties(File file)
+S Stock readSalesLog(File file)
+S Manifest readManifest(File file)
+S void writeManifest(File file, Manifest output)

-----

GUI:
 ____________________________________________________________
|          [store name] - Inventory management      [-][O][X]|
|____________________________________________________________|
|                                                            |
| Inventory:                           Capital: $100'000.00  |
|  ________________________________________________________  |
| |____Name___|Amount|Cost|Price|Re.point|Re.amount|Temp.|^| |
| |___rice____|__200_|__2_|__3__|___225__|___300___|_____|X| |
| |___beans___|__200_|__4_|__6__|___450__|___525___|_____|X| |
| |___pasta___|__200_|__3_|__4__|___125__|___250___|_____|X| |
| |_biscuits__|__200_|__2_|__5__|___350__|___575___|_____|X| |
| |___nuts____|__200_|__5_|__9__|___125__|___250___|_____|X| |
| |___chips___|__200_|__2_|__4__|___125__|___220___|_____| | |
| |_chocolate_|__200_|__5_|__5__|___250__|___375___|_____| | |
| |___bread___|__200_|__2_|__3__|___125__|___200___|_____| | |
| |_mushrooms_|__200_|__2_|__2__|___200__|___325___|__10_| | |
| |__tomatoes_|__200_|__1_|__2__|___325__|___400___|__10_|v| |
|  ______________________   __________________               |
| | Load item properties | | Import sales log |              |
| |______________________| |__________________|              |
|  _________________   _________________                     |
| | Export manifest | | Import manifest |                    |
| |_________________| |_________________|                    |
|____________________________________________________________|

When Amount < Re.point: show amount in red text
Load item properties: Open File browser (.csv)
Import sales log: Open File browser (.csv)
Import manifest: Open File browser (.csv)
Export manifest: Open File browser (save to .csv)

-----

Example:

Item item1 = new Item("rice", 2, 3, 225, 300);
Stock stock1 = new Stock();
stock1.addItems(item1, 100);
Truck truck1 = new OrdinaryTruck(stock1);
Manifest manifest1 = new Manifest();
manifest1.addTruck(truck1);
Store store = Store.getInstance();
store.setName("My store");
store.importManifest(manifest1);

CSVHandler csv = CSVHandler.getInstance();

// load item properties
Stock prop = csv.readItemProperties("itemprop.csv");
store.loadInventory(prop);
// then update values in GUI

// export manifest
Manifest manifest = store.exportManifest();
csv.writeManifest("manifest.csv", manifest);

// import manifest when trucks arrive
Manifest manifestReturn = csv.readManifest("manifest.csv");
store.importManifest(manifestReturn);
// then update values in GUI

// import sales log
Stock log = csv.readSalesLog("saleslog.csv");
store.importSalesLog(log);
// then update values in GUI

---

Item item1 = new Item("rice", 1, 2, 3, 4);
Item item2 = new Item("ice", 1, 2, 3, 4, -20);

Stock inventoryStore = new Stock();
inventoryStore.addItems(item1, 0);
inventoryStore.addItems(item2, 0);

Stock inventoryTruck = new Stock();
inventoryTruck.addItems(item1, 4);
inventoryTruck.addItems(item2, 4);
Manifest manifestCorrect = new Manifest();
Truck truck1 = new RefrigeratedTruck(inventoryTruck, -20);
manifestCorrect.addTruck(truck1);

Store store1 = new Store();
store1.loadInventory(inventoryStore);
Manifest manifestStore store1.exportManifest();

assertEquals(manifestCorrect, manifestStore);

---

Remember:
Design choices
Inheritance vs composition
Test driven development
not red, green, refactor

Read csv:
Data structure:

git log command updated

CSVFormatException
DeliveryException
StockException
